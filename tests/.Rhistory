n
library(mortfit)
?mortalityHazard
i
m
mort.model@name
sim.test
sim.test@data
sim.test@data
m
sim.data[[m]]
sim.data[[m]]@data
install.packages("GGally")
library(GGally)
q()
n
?mort.fit
i
m
sim.data[[m]]@data
sim.thetas[[i]]
sim.data[[m]]@data
sim.test@data
all(sim.data[[m]]@data$Dx==sim.test@data$Dx)
all(sim.data[[m]]@data$Dx==sim.test@data$Dx)
optim.fits[[m]]@theta.hat
i <- 2
warnings()
q()
n
help(package="roxygen2")
?namespace-roclet
?namespace_roclet
?collate_roclet
?rd_roclet
q()
n
names(all.models)
?all.models
mort.model@name
i <- 1
sim.data@data
mort.model@name
mort.model@theta.default
sim.thetas[[i]]
q()
n
warnings()[1]
names(all.models)
i <- 1
NA < 0.05
expect_true(NA,"test")
class(this.fit)
sim.test
class(optim.fit)
class(optim.fit)=="mortalityFit"
?class
is(optim.fit,"mortalityFit")
q()
n
q()
n
?try
q()
n
?expect_true
?expect_that
expect_that(FALSE, is_true(), "a", "b")
thistest
q()
n
names(all.models)
i <- 2
theta.test
?try-error
?try
?try-error-class
q()
n
class(out)
getClass(out)
str(out)
out@chr
out$chr
class(out)
out
print(out)
out[1]
q()
n
Q
q()
n
?integrate
integrate(dnorm,0,20000)
integrate(dnorm,0,Inf)
z
ages
integrate(toint,0,1)
integrate(toint,0,1,subdivisions=1000)
toint
Q
toint
Q
q()
n
toint
msg
q()
n
msg
integrate(toint,1,2)
integrate(toint,0,1)
integrate(toint,2,3)
integrate(toint,3,4)
integrate(toint,.00001,1)
integrate(toint,0,.00001)
exp(integrate(toint,0,.00001))
exp(integrate(toint,0,.00001)$value)
exp(.6638)
q()
Q
Q
q()
n
sim.data@data
q()
n
theta.test
log(1e-9)
log(1e-8)
?integrate
class(c("1", 3))
apply(c("1",3), class)
apply(c("1",3),1,class)
sapply(s("1",3),class)
sapply(c("1",3),class)
q()
n
q()
n
out
Q
q)(
q()
n
sim.thetas[[i]]
q()
n
traceback()
warnings()
warnings()
q()
n
toint
)
this.p
this.
this.q
this.p
sim.test@data
with(sim.test@data, { Dx/Nx }
)
sim.test@data
sim.test@age.offset
sim.data@data
sim.data@age.offset
q()
n
q()
n
q()
n
q()
n
q()
n
this.p
Q
q()
n
this.p
i
this.p
this.p
theta
Q
q()
n
i <- 2
i <- 1
i <- 3
warnings()
names(all.models)
this.fit@theta.hat
sim.thetas[[i]]
warnings()
q()
n
prof.12
prof.13
prof.23
mort.model <- all.models[[5]]
mort.model@name
q()
n
relerr
thistest
theta.hat
log10(relerr)
relerr
-log10(abs(relerr))
library(accuracy)
relerr
thistest
theta.hat
folded.data
str(folded.data)
folded.data@data
relerr
sim.data@data
sim.test@data
sim.data@data
q()
n
names(all.models)
sim.data@data
q()
n
theta.hat
relerr
thistest
prof.12
prof.13
prof.14
prof.14
prof.23
prof.24
prof.34
str(mort.model)
mort.model@loglik.fn
str(this.fit)
q()
n
q()
n
?expect_that
q()
n
true.ll
true.ll
q()
n
names(all.models)
sim.data@data
relerr
thistest
thistest
q()
n
sim.thetas[[i]]
this.fit@theta.hat
this.fit@optim.out
this.fit@theta.hat
sim.thetas[[i]]
prof.14
prof.24
prof.34
prof.12
prof.23
lb.haz
lb.haz@optim.default
q()
n
warnings()
prof.12
this.fit@optim.out
relerr
theta.hat
sim.thetas[[i]]
ll.diff
q()
n
this.fit@optim.out
relerr
ll.diff
q()
n
q()
n
relerr
ll.diff
ll.re
theta.hat
relerr
ll.re
ll.re==0
equals(ll.re,0)
all.equal(ll.re,0)
q()
n
log(1e-9)
q()
n
q()
n
q()
n
log(1e-9)
log10(1e-9)
q()
n
q()
n
true.ll
q()
n
q()
n
str(sim.data)
true.ll
install.packages("accuracy")
library(accuracy)
help(package="accuracy")
chisqtst
accuracy::chsqtst
PTBdefault
firstLook
q()
n
traceback()
sim.data@data
true.ll
mort.model@name
q()
n
true.ll
sim.data@data
sim.data@data
true.ll
mort.model@loglik.fn
tmp <- (sim.data@data$Nx-0.5*sim.data@data$Dx)
tmp
all(tmp>sim.data@data$Dx)
all.models[[1]]
all.models[[9]]
q()
n
res
lambda
mu
log(lambda)
Dx
Dx*log(lambda)
res
mu
Q
sim.data@data
plot(sim.data)
mort.model@name
names(all.models)
plot(sim.data)
true.ll
res
lambda <- Nx*mu
res
lambda
Q
q()
n
res
log(10)
10*log(10)-10
90*log(100)-100
lambda
Dx
all(lambda==Dx)
lambda[which(lambda!=Dx)]
plot(lambda, Dx)
abline(a=0,b=1)
sum(Dx*log(Dx)-Dx)
sum(Dx)
sum(Dx*log(Dx))
sum(log(Dx))
length(Dx)
Q
q()
n
library(mortfit)
?mort.fit
?plot
?plot.mortalityData
?optim.fit
?dev_mode()
?dev_mode
q()
n
?mort.fit
mort.fit
q()
n
q()
n
q()
n
optimFit
?optimFit
library(mortfit)
q()
n
q()
n
warnings()
gomp.haz
gomp.haz@hazard.fn
str(gomp.haz)
test1
q()
n
(27+11)/(28+15)
20*.88
120*.88
exp(-2.5)
library(mortfit)
mortfit::haz.to.prob
help(package="mortfit")
?haz.to.prob
help.search("haz.to.prob")
rm(list=ls())
q()
n
sage.val[3]
?mort.fit
mortfit:::haz.to.prob
warnings()
mortfit:::logistic.haz
test.logistic
(test.logistic-sage.val)/test.logistic
length(sage.val)
length(test.logistic)
mortfit:::logsitc.haz@theta.default
mortfit:::logistic.haz@theta.default
names(all.models)
ls()
q()
n
haz.to.prob
test.logistic
plot(sage.val, test.logistic);abline(a=0,b=1)
rm(list=ls())
q()
n
help(package="devtools")
?test
q()
n
warnings()
q()
n
test(pkg.dir)
pkg.dir
q()
n 
warnings()
traceback()
q()
n
load.kt.data
traceback()
this.dat
class(this.dat)
this.cohort
this.cdat
this.cdat
this.country
this.sex
this.cohort
min.age
1L
class(this.cdat)
as.data.frame(this.cdat)
tmp <- new("mortalityData",
name="test",
age.offset=min.age,
age.interval.width=1L,
data=as.data.frame(this.cdat))
tmp
Q
?array
?object
?structure
new()
new("NULL")
new("missing")
new("mortalityData")
getClass("mortalityData")
?isS4
ls()
q()
n
